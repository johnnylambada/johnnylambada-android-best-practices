<templateSet group="jlrv">
  <template name="jlrv-row-image" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    &gt;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;80dp&quot;&#10;        &gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/image&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            /&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/title&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintBottom_toTopOf=&quot;@id/subtitle&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;title&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            /&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/subtitle&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/title&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;subtitle&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            /&gt;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" description="XML For RecyclerView row with text and an image background" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jlrv-cells-layout" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    &gt;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        tools:context=&quot;.RecyclerViewActivity&quot;&#10;        &gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/cells&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintLeft_toLeftOf=&quot;parent&quot;&#10;            app:layout_constraintRight_toRightOf=&quot;parent&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:spanCount=&quot;2&quot;&#10;            app:layoutManager=&quot;androidx.recyclerview.widget.GridLayoutManager&quot;&#10;            /&gt;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" description="XML For RecyclerView of 2up cells" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jlrv-row-text" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    &gt;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;80dp&quot;&#10;        android:background=&quot;#777&quot;&#10;        &gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/title&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintBottom_toTopOf=&quot;@id/subtitle&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;title&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            /&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/subtitle&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:layout_marginEnd=&quot;8dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/title&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;subtitle&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            /&gt;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" description="XML for RecyclerView row with just text" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jlrv-rows-activity" value="import android.content.Context&#10;import android.content.Intent&#10;import android.graphics.drawable.ShapeDrawable&#10;import android.graphics.drawable.shapes.RectShape&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.databinding.DataBindingUtil&#10;import androidx.recyclerview.widget.DividerItemDecoration&#10;import androidx.recyclerview.widget.RecyclerView&#10;import app.data.Winery&#10;import app.databinding.ActivityRvRowsBinding&#10;import app.databinding.RowRvRowsImageBinding&#10;import app.databinding.RowRvRowsTextBinding&#10;import app.util.contentView&#10;import com.squareup.picasso.Picasso&#10;import jp.wasabeef.picasso.transformations.ColorFilterTransformation&#10;import kotlin.streams.toList&#10;&#10;class RvRowsActivity : AppCompatActivity() {&#10;    private val binding by contentView&lt;RvRowsActivity, ActivityRvRowsBinding&gt;(R.layout.activity_rv_rows)&#10;&#10;    sealed class Item(val winery: Winery) {&#10;        class Image(w: Winery ): Item(w)&#10;        class Text(w: Winery ): Item(w)&#10;    }&#10;&#10;    private val adapter by lazy {&#10;        val picasso = Picasso.get()&#10;        abstract class UpdatableViewHolder(view: View) : RecyclerView.ViewHolder(view) { abstract fun update(item: Item) }&#10;        class ImageViewHolder(view: View) : UpdatableViewHolder(view) {&#10;            val binding = DataBindingUtil.bind&lt;RowRvRowsImageBinding&gt;(view)!!&#10;            override fun update(item: Item) {&#10;                val winery = item.winery&#10;                with(binding) {&#10;                    title.text = winery.name&#10;                    subtitle.text = winery.phone&#10;                    winery.logo?.let {&#10;                        if (it.startsWith(&quot;http&quot;))&#10;                            picasso.load(it).transform(ColorFilterTransformation(0x70000000)).into(image)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        class TextViewHolder(view: View) : UpdatableViewHolder(view) {&#10;            val binding = DataBindingUtil.bind&lt;RowRvRowsTextBinding&gt;(view)!!&#10;            override fun update(item: Item) {&#10;                binding.title.text = item.winery.name&#10;                binding.subtitle.text = item.winery.phone&#10;            }&#10;        }&#10;        object: RecyclerView.Adapter&lt;UpdatableViewHolder&gt;() {&#10;            val items: MutableList&lt;Item&gt; = mutableListOf()&#10;            fun update(update: List&lt;Item&gt;) {&#10;                items.clear()&#10;                items.addAll(update)&#10;                notifyDataSetChanged()&#10;            }&#10;            override fun getItemCount() = items.size&#10;            override fun onBindViewHolder(holder: UpdatableViewHolder, position: Int) = holder.update(items[position])&#10;            override fun getItemViewType(position: Int): Int {&#10;                return when (items[position]){&#10;                    is Item.Image -&gt; R.layout.row_rv_rows_image&#10;                    is Item.Text -&gt; R.layout.row_rv_rows_text&#10;                }&#10;            }&#10;            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UpdatableViewHolder {&#10;                val view = LayoutInflater.from(parent.context).inflate(viewType, parent, false)&#10;                return when (viewType) {&#10;                    R.layout.row_rv_rows_image-&gt; ImageViewHolder(view)&#10;                    R.layout.row_rv_rows_text -&gt; TextViewHolder(view)&#10;                    else-&gt;throw IllegalStateException(&quot;invalid type&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding.rows.adapter = adapter&#10;        binding.rows.addItemDecoration(DividerItemDecoration(this, DividerItemDecoration.VERTICAL).also { deco -&gt;&#10;            with (ShapeDrawable(RectShape())){&#10;                intrinsicHeight = (resources.displayMetrics.density * 8).toInt()&#10;                alpha = 0&#10;                deco.setDrawable(this)&#10;            }&#10;        })&#10;        adapter.update(&#10;            Winery.data&#10;                .stream()&#10;                .map { if (it.name.length%2==0) Item.Image(it) else Item.Text(it) }&#10;                .toList()&#10;        )&#10;    }&#10;&#10;    companion object {&#10;        fun intent(ctx: Context) = Intent(ctx, RvRowsActivity::class.java)&#10;    }&#10;}&#10;" description="Full RecyclerView for Rows Activity" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="jlrv-rows-layout" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    &gt;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        tools:context=&quot;.RecyclerViewActivity&quot;&#10;        &gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/rows&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            app:layoutManager=&quot;androidx.recyclerview.widget.LinearLayoutManager&quot;&#10;            /&gt;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" description="XML for RecyclerView with rows" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jlrv-cells-activity" value="import android.content.Context&#10;import android.content.Intent&#10;import android.graphics.Rect&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.databinding.DataBindingUtil&#10;import androidx.recyclerview.widget.RecyclerView&#10;import app.data.Winery&#10;import app.databinding.ActivityRvCellsBinding&#10;import app.databinding.RowRvCellsImageBinding&#10;import app.databinding.RowRvCellsTextBinding&#10;import app.util.contentView&#10;import com.squareup.picasso.Picasso&#10;import jp.wasabeef.picasso.transformations.ColorFilterTransformation&#10;import kotlin.streams.toList&#10;&#10;class RvCellsActivity : AppCompatActivity() {&#10;    private val binding by contentView&lt;RvCellsActivity, ActivityRvCellsBinding&gt;(R.layout.activity_rv_cells)&#10;&#10;    sealed class Item(val winery: Winery) {&#10;        class Image(w: Winery ): Item(w)&#10;        class Text(w: Winery ): Item(w)&#10;    }&#10;&#10;    private val adapter by lazy {&#10;        val picasso = Picasso.get()&#10;        abstract class UpdatableViewHolder(view: View) : RecyclerView.ViewHolder(view) { abstract fun update(item: Item) }&#10;        class ImageViewHolder(view: View) : UpdatableViewHolder(view) {&#10;            val binding = DataBindingUtil.bind&lt;RowRvCellsImageBinding&gt;(view)!!&#10;            override fun update(item: Item) {&#10;                val winery = item.winery&#10;                with(binding) {&#10;                    title.text = winery.name&#10;                    subtitle.text = winery.phone&#10;                    winery.logo?.let {&#10;                        if (it.startsWith(&quot;http&quot;))&#10;                            picasso.load(it).transform(ColorFilterTransformation(0x70000000)).into(image)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        class TextViewHolder(view: View) : UpdatableViewHolder(view) {&#10;            val binding = DataBindingUtil.bind&lt;RowRvCellsTextBinding&gt;(view)!!&#10;            override fun update(item: Item) {&#10;                binding.title.text = item.winery.name&#10;                binding.subtitle.text = item.winery.phone&#10;            }&#10;        }&#10;        object: RecyclerView.Adapter&lt;UpdatableViewHolder&gt;() {&#10;            val items: MutableList&lt;Item&gt; = mutableListOf()&#10;            fun update(update: List&lt;Item&gt;) {&#10;                items.clear()&#10;                items.addAll(update)&#10;                notifyDataSetChanged()&#10;            }&#10;            override fun getItemCount() = items.size&#10;            override fun onBindViewHolder(holder: UpdatableViewHolder, position: Int) = holder.update(items[position])&#10;            override fun getItemViewType(position: Int): Int {&#10;                return when (items[position]){&#10;                    is Item.Image -&gt; R.layout.row_rv_cells_image&#10;                    is Item.Text -&gt; R.layout.row_rv_cells_text&#10;                }&#10;            }&#10;            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UpdatableViewHolder {&#10;                val view = LayoutInflater.from(parent.context).inflate(viewType, parent, false)&#10;                return when (viewType) {&#10;                    R.layout.row_rv_cells_image-&gt; ImageViewHolder(view)&#10;                    R.layout.row_rv_cells_text -&gt; TextViewHolder(view)&#10;                    else-&gt;throw IllegalStateException(&quot;invalid type&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        binding.cells.adapter = adapter&#10;        binding.cells.addItemDecoration(object: RecyclerView.ItemDecoration(){&#10;            val px = (resources.displayMetrics.density * 8).toInt()&#10;            val spanCount = 2&#10;            override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {&#10;                val index = parent.getChildLayoutPosition(view)&#10;                val isLeft = (index % spanCount == 0)&#10;                outRect.set(&#10;                    if (isLeft) px else px/2,&#10;                    0,&#10;                    if (isLeft) px/2 else px,&#10;                    px&#10;                )&#10;            }&#10;        })&#10;&#10;        adapter.update(&#10;            Winery.data&#10;                .stream()&#10;                .map { if (it.name.length%2==0) Item.Image(it) else Item.Text(it) }&#10;                .toList()&#10;        )&#10;    }&#10;&#10;    companion object {&#10;        fun intent(ctx: Context) = Intent(ctx, RvCellsActivity::class.java)&#10;    }&#10;}&#10;" description="Full RecyclerView for Cells Activity" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="jlrv-cell-image" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    &gt;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        &gt;&#10;        &lt;androidx.constraintlayout.widget.Guideline&#10;            android:id=&quot;@+id/hcenter&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            app:layout_constraintGuide_percent=&quot;.5&quot;&#10;            /&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/image&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintDimensionRatio=&quot;w,1:1&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            /&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/title&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_margin=&quot;8dp&quot;&#10;            app:layout_constraintBottom_toTopOf=&quot;@id/hcenter&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;title&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            /&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/subtitle&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_margin=&quot;8dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/hcenter&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;subtitle&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            /&gt;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" description="XML For RecyclerView square cell with image" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jlrv-cell-text" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    &gt;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:background=&quot;#777&quot;&#10;        &gt;&#10;        &lt;androidx.constraintlayout.widget.Guideline&#10;            android:id=&quot;@+id/hcenter&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            app:layout_constraintGuide_percent=&quot;.5&quot;&#10;            /&gt;&#10;        &lt;Space&#10;            android:id=&quot;@+id/square&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;0dp&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintDimensionRatio=&quot;w,1:1&quot;&#10;            /&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/title&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_margin=&quot;8dp&quot;&#10;            app:layout_constraintBottom_toTopOf=&quot;@id/hcenter&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;title&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            /&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/subtitle&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_margin=&quot;8dp&quot;&#10;            app:layout_constraintTop_toBottomOf=&quot;@id/hcenter&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;            tools:text=&quot;subtitle&quot;&#10;            android:textSize=&quot;12sp&quot;&#10;            /&gt;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/layout&gt;" description="XML For RecyclerView square cell text only" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
</templateSet>