<templateSet group="jlsetup">
  <template name="jlsetup-databinding" value="/*&#10;app/build.gradle:&#10;plugins {&#10;    id 'kotlin-kapt' // or maybe apply plugin: 'kotlin-kapt'&#10;android {&#10;    buildFeatures { dataBinding true }&#10; &#10;app/MainActivity.kt:&#10;class MainActivity : AppCompatActivity() {&#10;    private val binding by contentView&lt;MainActivity, ActivityMainBinding&gt;(R.layout.activity_main)&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // binding MUST be mentioned because contentView is lazy&#10;        Snackbar.make(binding.root,&quot;Welcome!&quot;,Snackbar.LENGTH_SHORT).show()&#10;&#10;util/ContentViewBinder.kt:&#10;/**&#10; * Lazily inflate a data binding layout, call [Activity.setContentView] and return the binding.&#10; */&#10;class ContentViewBinder&lt;in R : Activity, out T : ViewDataBinding&gt;(@LayoutRes private val layout: Int) {&#10;    private var binding: T? = null&#10;    operator fun getValue(activity: R, property: KProperty&lt;*&gt;): T {&#10;        if (binding == null)&#10;            binding = DataBindingUtil.setContentView(activity, layout)&#10;        return binding!!&#10;    }&#10;}&#10;fun &lt;R : Activity, T : ViewDataBinding&gt; contentView(@LayoutRes layout: Int): ContentViewBinder&lt;R, T&gt; = ContentViewBinder(layout)&#10;&#10;layout/activity_main.xml:&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&lt;/layout&gt;&#10;*/&#10;" description="How to set up databinding" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="jlsetup-retrofit" value="/*&#10;app/build.gradle:&#10;plugins {&#10;...&#10;    id 'kotlin-kapt' // or apply plugin: 'kotlin-kapt'&#10;...&#10;}&#10;android {&#10;...&#10;   compileOptions {&#10;       sourceCompatibility JavaVersion.VERSION_1_8&#10;       targetCompatibility JavaVersion.VERSION_1_8&#10;   }&#10;&#10;   kotlinOptions { jvmTarget = &quot;1.8&quot; }&#10;...&#10;}&#10;dependencies{&#10;jldep-rxjava2&#10;jldep-retrofit&#10;}&#10;&#10;mkdir app/rest&#10;app/rest/CoinbaseApi.kt&#10;&#10;import com.squareup.moshi.Json&#10;import com.squareup.moshi.JsonClass&#10;import com.squareup.moshi.Moshi&#10;import io.reactivex.Observable&#10;import okhttp3.OkHttpClient&#10;import retrofit2.Response&#10;import retrofit2.Retrofit&#10;import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory&#10;import retrofit2.converter.moshi.MoshiConverterFactory&#10;import retrofit2.converter.scalars.ScalarsConverterFactory&#10;import retrofit2.http.GET&#10;&#10;// {&#10;//   &quot;time&quot;: { &quot;updated&quot;: &quot;Jan 22, 2021 20:06:00 UTC&quot;, &quot;updatedISO&quot;: &quot;2021-01-22T20:06:00+00:00&quot;, &quot;updateduk&quot;: &quot;Jan 22, 2021 at 20:06 GMT&quot; },&#10;//   &quot;disclaimer&quot;: &quot;This data was produced from the CoinDesk Bitcoin Price Index (USD). Non-USD currency data converted using hourly conversion rate from openexchangerates.org&quot;,&#10;//   &quot;chartName&quot;: &quot;Bitcoin&quot;,&#10;//   &quot;bpi&quot;: {&#10;//     &quot;USD&quot;: { &quot;code&quot;: &quot;USD&quot;, &quot;symbol&quot;: &quot;&amp;#36;&quot;, &quot;rate&quot;: &quot;33,510.6867&quot;, &quot;description&quot;: &quot;United States Dollar&quot;, &quot;rate_float&quot;: 33510.6867 },&#10;//     &quot;GBP&quot;: { &quot;code&quot;: &quot;GBP&quot;, &quot;symbol&quot;: &quot;&amp;pound;&quot;, &quot;rate&quot;: &quot;24,492.5923&quot;, &quot;description&quot;: &quot;British Pound Sterling&quot;, &quot;rate_float&quot;: 24492.5923 },&#10;//     &quot;EUR&quot;: { &quot;code&quot;: &quot;EUR&quot;, &quot;symbol&quot;: &quot;&amp;euro;&quot;, &quot;rate&quot;: &quot;27,543.7068&quot;, &quot;description&quot;: &quot;Euro&quot;, &quot;rate_float&quot;: 27543.7068 }&#10;//   }&#10;// }&#10;&#10;@JsonClass(generateAdapter = true) data class CoindeskPriceResponse(&#10;        val time: CoindeskPriceTimeResponse,&#10;        val chartName: String,&#10;        val bpi: Map&lt;String,CoindeskPriceCurrencyResponse&gt;&#10;)&#10;&#10;@JsonClass(generateAdapter = true) data class CoindeskPriceTimeResponse(&#10;        val updated: String // TODO: convert to Date&#10;)&#10;&#10;@JsonClass(generateAdapter = true) data class CoindeskPriceCurrencyResponse(&#10;        val code: String,&#10;        val symbol: String,&#10;        @field:Json(name = &quot;rate_float&quot;) val rate: Double&#10;)&#10;&#10;interface CoinbaseService {&#10;    @GET(&quot;v1/bpi/currentprice.json&quot;) fun getCurrentPrices(): Observable&lt;Response&lt;CoindeskPriceResponse&gt;&gt; // See https://square.github.io/retrofit/&#10;}&#10;&#10;object CoinbaseApi {&#10;    val service = Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.coindesk.com/&quot;)&#10;            .addConverterFactory(ScalarsConverterFactory.create())&#10;            .addConverterFactory(MoshiConverterFactory.create(Moshi.Builder().build()))&#10;            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())&#10;            .client(OkHttpClient.Builder().build())&#10;            .build()&#10;            .create(CoinbaseService::class.java)&#10;}&#10;&#10;Usage:&#10;    override fun onResume() {&#10;        super.onResume()&#10;        disposable.add(CoinbaseApi.service.getCurrentPrices()&#10;                .subscribeOn(Schedulers.io())&#10;                .observeOn(AndroidSchedulers.mainThread())&#10;                .subscribe(&#10;                        { response -&gt;&#10;                            if (response.isSuccessful) {&#10;                                // do something with successful response&#10;                            } else {&#10;                                // do something with unsuccessful response&#10;                            }&#10;                        },&#10;                        { throwable: Throwable? -&gt;&#10;                            // do something with throwable&#10;                        }&#10;                ))&#10;*/&#10;" description="How to set up retrofit" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
</templateSet>