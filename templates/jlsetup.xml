<templateSet group="jlsetup">
  <template name="jlsetup-databinding" value="/*&#10;app/build.gradle:&#10;plugins {&#10;    id 'kotlin-kapt' // or maybe apply plugin: 'kotlin-kapt'&#10;android {&#10;    buildFeatures { dataBinding true }&#10; &#10;app/MainActivity.kt:&#10;class MainActivity : AppCompatActivity() {&#10;    private val binding by contentView&lt;MainActivity, ActivityMainBinding&gt;(R.layout.activity_main)&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // binding MUST be mentioned because contentView is lazy&#10;        Snackbar.make(binding.root,&quot;Welcome!&quot;,Snackbar.LENGTH_SHORT).show()&#10;&#10;util/ContentViewBinder.kt:&#10;/**&#10; * Lazily inflate a data binding layout, call [Activity.setContentView] and return the binding.&#10; */&#10;class ContentViewBinder&lt;in R : Activity, out T : ViewDataBinding&gt;(@LayoutRes private val layout: Int) {&#10;    private var binding: T? = null&#10;    operator fun getValue(activity: R, property: KProperty&lt;*&gt;): T {&#10;        if (binding == null)&#10;            binding = DataBindingUtil.setContentView(activity, layout)&#10;        return binding!!&#10;    }&#10;}&#10;fun &lt;R : Activity, T : ViewDataBinding&gt; contentView(@LayoutRes layout: Int): ContentViewBinder&lt;R, T&gt; = ContentViewBinder(layout)&#10;&#10;layout/activity_main.xml:&#10;&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&lt;/layout&gt;&#10;*/&#10;" description="How to set up databinding" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
</templateSet>